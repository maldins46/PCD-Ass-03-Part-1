Messaggi:
	StartGameMsg:
	    { int nPlayers, int cominationSize, [ Set<ActorRef> playersRef, ActorRef refereeRef ] }
	    Gui - Arbitro
	    Notifica all'arbitro di iniziare la partita. L'arb. crea i giocatori

	StopGameMsg:
	    {}
        Gui - Arbitro, Arbitro - Players
        Inviato quando viene stoppato il gioco con il msg, triggera lo stop prima dell'attore arbitro,
        poi di tutti gli altri.

	StartTurnMsg:
	    {}
	    Arbitro - Player
	    Inviato a un giocatore per volta, di fare una scelta. Parte ogni volta che
	    un giocatore finisce il proprio turno, o all'avvio, per il primo turno

	AttemptMsg:
	    { Combination guessedCombination }
	    Player - PlayerR
	    Chiede a un giocatore quanto una sequenza scelta si avvicina a quella giusta.

	RespondToAttemptMsg:
	    { int guessedCyphers, int guessedPositions }
	    PlayerR - Player
    	Risponde al giocatore sulla sequenza scelta.

	FinishTurnMsg:
	    {}
	    Player - Arbitro
	    Notifica di aver finito il proprio turno. Risolve anche il timeout.

	SuppositionMsg:
	    { Map<ActorRef, Combination> supposedCombinations }
	    Player - Arbitro
	    Notifica all'arbitro di aver trovato una combinazione definitiva

	VerifySuppositionMsg:
	    { Combination supposedCombination }
	    Arbitro - Players
	    Arrivata una combinazione finale, l'arbitro chiede a ogni giocatore con questo
	    messaggio se la combinazione è giusta oppure no

	VerifySuppositionResponseMsg
        { boolean combinationGuessed }
	    Player - Arbitro
	    Risposta all'arbitro riguardo la validità della combinazione nel tentativo di vitt.

	WinMsg:
	    { ActorRef winner }
	    Arbitro - Players, Arbitro - Gui
		Se il giocatore vince, i player alla ricezione si spengono

    LoseMsg:
        { int nActivePlayers, ActorRef loser }
    	Arbitro - Players, Arbitro - Gui
        Se il giocatore perde, e tutti i gioc. hanno perso, tutti i giocatori si spengono

	LogMsg:
	    { string log }
	    Arbitro - Gui
	    Cambia il controlText della Gui

    TimeoutMsg:
        Arbitro - Player
        Notifica al player che non è più il suo turno.



Attori:

RefereeActor
    Map<actorRef, bool> players: memorizzazione dei Player, compresi gli esclusi

    List<ActorRef> currentLap: tiene traccia del 'giro turni' corrente, ne togli uno ogni volta che
                               uno ha eseguito il proprio turno. Una volta finita la lista, la ricrei
                               ordinando casualmente i player in gioco.

    Map<ActorRef, Boolean> verifySupposition
    ActorRef supposingActor


    - match StartGameMsg
        1. crei tutti i player, te ne salvi anche un riferimento sulla map players
        2. inizializzi il currentLap
        3. invii a tutti i players uno StartGameMsg.
        4. lanci un messaggio startTurn al giocatore corrisp.
        5. rimuovi il giocatore iniziato dal currentLap

    - match StopGameMsg:
        1. lo invii a tutti i players
        2. ti stoppi tu

    - match FinishTurnMsg
        1. ri-popoli, se serve (cioè se currentLap è vuoto), il currentLap
        2. dai lo startTurn al giocatore succ.
        3. rimuovi il giocatore iniziato dal currentLap

    - match SuppositionMsg
        1. Poni verifiedActor uguale al mittente del messaggio
        2. invii a tutti il msg VerifySuppositionMsg

    - match VerifySuppositionResponseMsg
        1. metti l'attore corrispondente nella map verifyResponses, con true se comb. corretta, false altrimenti
        2. Controlli se sono arrivate tutte le risposte (verifyResponses.size == players.size)
        3. Se sono tutte, controlli che siano tutte true
        4. A seconda che siano tutte true oppure no, invii a tutti il VerifySuppositionResponse
           configurato diversamente. Da includere dentro il mess. anche il n. di giocatori in corsa.
        5. Inizializzi le strutture verifyResponses (deve essere vuota), e metti verifiedActor a null


PlayerActor
    Combination combination: di default 5 num., la lunghezza in generale viene passata dalla gui
    Set<ActorRef> players: riferimenti agli altri giocatori
    ActorRef referee: rif. all'arbitro

    Map<ActorRef, Combination> guessedCombinations: tiene traccia delle comb. indovinate, iniz. 0
    Map<ActorRef, Set<Combination>> triedCombinations: combinazioni provate per ogni attore

    - match StartGameMsg:
        1. salva rif. a arbitro e players
        2. crea la tua combinaz, a seconda di m

    - match StopGameMsg:
        1. stoppati

    - match StartTurnMsg:
        1. abilita lo stato "turn"
        2. Scegli casualmente un altro player di cui non hai già la comb.
        3. Crea la combinazione da inviargli, controllando che non gliel abbia già inviata
        4. inviagliela con AttemptMsg

    - match AttemptMsg:
        1. confronto la combinazione provata con la mia
        2. risponddo con un msg RespondToAttemptMsg, con dentro scritto le cifre giuste, e quelle nella pos. giusta

    - match RespondToAttemptMsg: !!!!(puoi riceverlo solo se è il tuo turno)!!!!
        1. Disabilita lo stato "turn"
        2. Se tutte le cifre sono nel posto giusto (m cif. giuste, m in pos. giusta), metto la comb in guessedActors
        3. Se guessedActors.size == players.size, invia un SuppositionMsg con tutte le comb.
        4. Altrimenti, invia FinishTurnMsg

    - TimeoutMsg !!!!(puoi riceverlo solo se è il tuo turno)!!!!
        1. Se sei umano, disabilita la gui
        2. In ogni caso, disabilita lo stato "turn"

    - match VerifySuppositionMsg:
        1. Confronti la tua combination con quella inviata
        2. invii all'arbitro true se indovinata, false altrimenti

    - WinMsg:
        1. Se sei anche umano, e se mio dio parla di me, mostra label hai vinto
        2. stoppati sempre e comunque

    - LoseMsg:
        1. Se sei umano, mostra label hai perso
        2. Se n.player stoppati == n.player, stoppati



GuiActor
    JFrame configuration: frame con le cose per la configurazione

    - match LogMsg:
        1. mostra il log nella label di controllo (con invokeAndWait, almeno non si blocca)




Altre classi:

Combination
    list<Integer> combination

    factory per la creazione
    bool compare(Combination otherComb)